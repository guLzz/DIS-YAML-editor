###############################################################
## Presence
################################################################
- id: update_meta_tracker
  alias: "Update Device Meta Tracker"
  initial_state: 'on'
  trigger:
    # Delayed action for router-based and Owntracks trackers that are not 100% reliable
    - platform: state
      entity_id:
        - device_tracker.myiphone
        - device_tracker.rashmisiphone
        - device_tracker.alokphone_alokphone
        - device_tracker.rashmiphone_rashmiphone
      to: 'not_home'
      for: '00:07:00'
    - platform: state
      entity_id:
        - device_tracker.alokphone_alokphone
        - device_tracker.rashmiphone_rashmiphone
      to: 'home'
      for: '00:00:30'
    - platform: state
      entity_id:
        - device_tracker.alokiosiphone
        - device_tracker.alok_alok
        - device_tracker.e1594e5321df414c82daf655d5282fca
        - device_tracker.rashmiappiphone
        - device_tracker.sonu_sonu
        - device_tracker.b4445761f6c04b7f835fcfdc03b47111
    - platform: state
      entity_id:
        - device_tracker.myiphone
        - device_tracker.elantrase
        - device_tracker.rashmisiphone
      to: 'home'
  action:
    - service: script.updatetracker
      data_template:
        entityid: '{{trigger.entity_id}}'
        fromstate: '{{trigger.from_state.state}}'
        tostate: '{{trigger.to_state.state}}'
    # - service: logbook.log
    #   data_template:
    #     name: "Meta Tracker: "
    #     message: "{{trigger.entity_id}} changed from {{trigger.from_state.state}} to {{trigger.to_state.state}}"
    # - service: script.notify_me
#################################################################
## Security System
#################################################################

- id: abode_ios_notifications
  alias: Abode Actionable Notification
  trigger:
    - platform: event
      event_type: abode_alarm
  action:
    - service: notify.ios
      data:
        message: 'Abode alarm triggered!'
        data:
          push:
            badge: 0
            category: "abode_alarm"

- id: disarm_abode_from_away
  alias: 'Disarm Abode from Away'
  initial_state: 'on'
  condition:
    - condition: state
      entity_id: input_select.abodestatus
      state: 'armed_away'
    - condition: state
      entity_id: input_boolean.abodeupdate
      state: 'on'
    - condition: template
      value_template: >
        {%- if states.automation.arm_abode.attributes.last_triggered -%}
          {{ (as_timestamp(now()) - as_timestamp(states.automation.arm_abode.attributes.last_triggered)) > 240 }}
        {%- else -%}
          true
        {%- endif -%}
  trigger:
    - platform: state
      entity_id: group.household
      from: 'not_home'
      to: 'home'
    - platform: event
      event_type: ios.notification_action_fired
      event_data:
        actionName: DISARM_ABODE
  action:
     service: homeassistant.turn_on
     entity_id: script.abodestandby

- id: close_garage_door_notification
  alias: 'Close Garage Door Notification'
  initial_state: 'on'
  condition:
    condition: state
    entity_id: cover.garagedoor
    state: 'open'
  trigger:
    - platform: state
      entity_id: input_select.abodestatus
      to: 'armed_home'
    - platform: state
      entity_id: input_select.abodestatus
      to: 'armed_away'
  action:
    - service: notify.pushbullet
      data:
        message: "Garage Door Open"
        title: "Garage Door Open"
    - service: homeassistant.turn_on
      entity_id: script.notificationgaragedoor

- id: disarm_abode_at_night
  alias: 'Disarm Abode at night'
  initial_state: 'on'
  condition:
    - condition: state
      entity_id: input_select.abodestatus
      state: 'armed_home'
    - condition: state
      entity_id: input_boolean.abodeupdate
      state: 'on'
  trigger:
   - platform: state
     entity_id:
       - device_tracker.meta_rashmi
       - device_tracker.meta_alok
     from: 'not_home'
     to: 'home'
  action:
    service: homeassistant.turn_on
    entity_id: script.abodestandby

- id: abode_home_from_standby
  alias: 'Abode Home from Standby'
  initial_state: 'on'
  condition:
    condition: and
    conditions:
     - condition: state
       entity_id: input_select.abodestatus
       state: 'disarmed'
     - condition: time
       after: '22:15:00'
       before: '07:00:00'
     - condition: state
       entity_id: input_boolean.abodeupdate
       state: 'on'
     - condition: template
       value_template: >
         {%- if states.input_select.abodestatus.last_changed -%}
           {{ (as_timestamp(now()) - as_timestamp(states.input_select.abodestatus.last_changed)) > 300 }}
         {%- else -%}
           true
         {%- endif -%}
  trigger:
    - platform: time
      minutes: '/10'
      seconds: 00
  action:
    - service: homeassistant.turn_on
      entity_id: script.abodehome

- id: abode_standby
  alias: 'Abode Standby'
  initial_state: 'on'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: group.household
        state: 'home'
      - condition: time
        after: '08:15:00'
        before: '21:45:00'
      - condition: state
        entity_id: input_boolean.abodeupdate
        state: 'on'
      - condition: template
        value_template: >
          {%- if states.input_select.abodestatus.last_changed -%}
            {{ (as_timestamp(now()) - as_timestamp(states.input_select.abodestatus.last_changed)) > 300 }}
          {%- else -%}
            true
          {%- endif -%}
      - condition: or
        conditions:
          - condition: state
            entity_id: input_select.abodestatus
            state: 'armed_home'
          - condition: state
            entity_id: input_select.abodestatus
            state: 'armed_away'
  trigger:
    - platform: time
      minutes: '/10'
      seconds: 00
  action:
    - service: homeassistant.turn_on
      entity_id: script.abodestandby

- id: abode_arm
  alias: 'Arm Abode'
  initial_state: 'on'
  condition:
    - condition: state
      entity_id: input_boolean.abodeupdate
      state: 'on'
    - condition: template
      value_template: >
        {%- if states.automation.disarm_abode_from_away.attributes.last_triggered -%}
          {{ (as_timestamp(now()) - as_timestamp(states.automation.disarm_abode_from_away.attributes.last_triggered)) > 240 }}
        {%- else -%}
          true
        {%- endif -%}
    - condition: template
      value_template: "{{ states('input_select.abodestatus') != 'armed_away' }}"
  trigger:
    - platform: state
      entity_id: group.household
      from: 'home'
      to: 'not_home'
    - platform: state
      entity_id: group.household
      from: 'home'
      to: 'not_home'
      for: '00:10:00'
  action:
     service: homeassistant.turn_on
     entity_id: script.abodeaway

- id: abode_home_at_night
  alias: 'Abode Home at night'
  initial_state: 'on'
  condition:
    condition: and
    conditions:
     - condition: state
       entity_id: input_boolean.abodeupdate
       state: 'on'
     - condition: state
       entity_id: group.household
       state: 'home'
  trigger:
    platform: time
    at: '22:00:00'
  action:
     service: homeassistant.turn_on
     entity_id: script.abodehome

- id: abode_disarm_morning
  alias: 'Disarm Abode in the morning'
  initial_state: 'on'
  condition:
    condition: and
    conditions:
     - condition: state
       entity_id: group.household
       state: 'home'
     - condition: state
       entity_id: input_boolean.abodeupdate
       state: 'on'
  trigger:
    - platform: time
      at: '07:20:00'
  action:
    - service: homeassistant.turn_on
      entity_id: script.abodestandby
    - service: automation.turn_on
      entity_id: automation.turn_off_master_lights

- id: enable_recording
  alias: Enable Recording
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: input_boolean.startrecording
    to: 'on'
  action:
    service: switch.turn_on
    entity_id: switch.foscam_record

- id: disable_recording
  alias: Disable Recording
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: input_boolean.startrecording
    to: 'off'
  action:
    service: switch.turn_off
    entity_id: switch.foscam_record

- id: disable_thermostat_away_mode
  alias: 'Disable thermostat away'
  initial_state: 'on'
  condition:
    - condition: template
      value_template: >
        {{states('input_select.abodestatus') == 'disarmed' and states('group.thermostats') == 'on'}}
  trigger:
    - platform: time
      minutes: '/5'
      seconds: 00
  action:
    - service: homeassistant.turn_off
      data_template:
        entity_id: >
          {%- if states('switch.downstairs_away') == 'on' -%}
            switch.downstairs_away
          {%- elif states('switch.upstairs_away') == 'on' -%}
            switch.upstairs_away
          {%- elif states('switch.bedroom_away') == 'on' -%}
            switch.bedroom_away
          {%- endif -%}

- id: enable_thermostat_away_mode
  alias: 'Enable thermostat away'
  initial_state: 'on'
  condition:
    - condition: or
      conditions:
        - condition: template
          value_template: >
            {{states('input_select.abodestatus') == 'armed_away' and states('switch.downstairs_away') == 'off'}}
        - condition: template
          value_template: >
            {{states('input_select.abodestatus') == 'armed_away' and states('switch.upstairs_away') == 'off'}}
        - condition: template
          value_template: >
            {{states('input_select.abodestatus') == 'armed_away' and states('switch.bedroom_away') == 'off'}}
  trigger:
    - platform: time
      minutes: '/5'
      seconds: 00
  action:
    - service: homeassistant.turn_on
      data_template:
        entity_id: >
          {%- if states('switch.downstairs_away') == 'off' -%}
            switch.downstairs_away
          {%- elif states('switch.upstairs_away') == 'off' -%}
            switch.upstairs_away
          {%- elif states('switch.bedroom_away') == 'off' -%}
            switch.bedroom_away
          {%- endif -%}

- id: image_processing_scan
  alias: 'Image Processing Scan'
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.backyard_field_detection
        - binary_sensor.driveway_field_detection
        - binary_sensor.patio_field_detection
        - binary_sensor.porch_field_detection
        - binary_sensor.backyard_line_crossing
        - binary_sensor.driveway_line_crossing
        - binary_sensor.patio_line_crossing
        - binary_sensor.porch_line_crossing
        - binary_sensor.ring_front_door_motion
  action:
    - service: image_processing.scan
      data_template:
        entity_id: "image_processing.tensorflow_{{ trigger.entity_id.split('.')[1].split('_')[0] }}"
    # - service: image_processing.scan
    #   data_template:
    #     entity_id: "image_processing.opencv_{{ trigger.entity_id.split('.')[1].split('_')[0] }}"

- id: opencv_image_processing_notification
  alias: 'OpenCV image processing'
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id:
        - image_processing.opencv_porch
        - image_processing.opencv_patio
        - image_processing.opencv_driveway
        - image_processing.opencv_backyard
  condition:
    - condition: template
      value_template: '{{ trigger.to_state.state |int > 0 }}'
  action:
    - service: logbook.log
      data_template:
        name: "OpenCV: "
        message: >-
          {% for object in state_attr(trigger.entity_id,'matches').keys() -%}{%- if loop.first %}{% elif loop.last %}, {% else %}, {% endif -%}{{ object|title }}{%- endfor %} detected in {{ trigger.to_state.attributes.camera.split('.')[1] }}.

- id: tf_image_processing_notification
  alias: 'TF image processing'
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id:
        - image_processing.tensorflow_porch
        - image_processing.tensorflow_patio
        - image_processing.tensorflow_driveway
        - image_processing.tensorflow_backyard
  condition:
    - condition: template
      value_template: '{{ trigger.to_state.state |int > 0 }}'
    # - condition: template
    #   value_template: >
    #       {% set camera = trigger.entity_id.split('.')[1].split('_')[1] %}
    #       {%- set tags = trigger.to_state.attributes.matches.keys()|list -%}
    #
    #       {% macro get_list(obj) %}
    #         {%- for x in trigger.to_state.attributes.matches[obj]|list if x.box[0] > 0.25 -%}
    #           {%- if loop.first %}{% elif loop.last %},{% else %},{% endif -%}{{ obj }}
    #         {%- endfor -%}
    #       {% endmacro %}
    #
    #       {% macro run() %}
    #         {%- for object in tags -%}
    #         {%- if loop.first %}{% elif loop.last %}, {% else %}, {% endif -%}{{ obj }}
    #           {{- get_list(object).split(',')|list|unique|list|join|title }}
    #         {%- endfor -%}
    #       {% endmacro %}
    #
    #       {% set output = run() %}
    #       {{ output == '' }}
  action:
    - service: logbook.log
      data_template:
        name: "TF: "
        message: >-
          {% for object in state_attr(trigger.entity_id,'matches').keys() -%}{%- if loop.first %}{% elif loop.last %}, {% else %}, {% endif -%}{{ object|title }}{%- endfor %} detected in {{ trigger.entity_id.split('.')[1].split('_')[1] }} and attributes are {{ states.image_processing[trigger.entity_id.split('.')[1]].attributes.matches }}.
# {% set camera = trigger.entity_id.split('.')[1].split('_')[1] %}
# {%- set tags = state_attr(trigger.entity_id,'matches').keys()|list -%}
#
# {% macro get_list(obj) %}
#   {%- for x in state_attr(trigger.entity_id,'matches')[obj]|list if x.box[0] > 0.25 -%}
#     {%- if loop.first %}{% elif loop.last %},{% else %},{% endif -%}{{ obj }}
#   {%- endfor -%}
# {% endmacro %}
#
# {% macro run() %}
#   {%- for object in tags -%}
#   {%- if loop.first %}{% elif loop.last %}, {% else %}, {% endif -%}{{ obj }}
#     {{- get_list(object).split(',')|list|unique|list|join|title }}
#   {%- endfor -%}
# {% endmacro %}
#
# {% set output = run() %}
# {{- output ~ ' detected in ' ~ camera if output != '' }}

# {% set camera = trigger.entity_id.split('.')[1].split('_')[1] %}
# {%- set tags = state_attr(trigger.entity_id,'matches').keys()|list -%}
# {%- for object in tags -%}
#   {%- set outer_loop = loop %}
#   {%- for x in state_attr(trigger.entity_id,'matches')[object]|list if x.box[0] > 0.25 -%}
#     {%- if outer_loop.first %}{% elif outer_loop.last %}, {% else %},{% endif -%}{{ object }}
#   {%- endfor -%}
# {% endfor -%}
# {{- ' detected in ' ~ camera if tags|count |int > 0 }}

# {% for object in state_attr(trigger.entity_id,'matches').keys() if states.image_processing[trigger.entity_id.split('.')[1]].attributes.matches[object][0].box[0] > 0.25 -%}{%- if loop.first %}{% elif loop.last %}, {% else %}, {% endif -%}{{ object }}{%- endfor %} detected in {{ trigger.entity_id.split('.')[1].split('_')[1] }}.

- id: notify_camera_pictures
  alias: 'Notify camera pictures'
  initial_state: 'off'
  condition:
    - condition: state
      entity_id: input_select.abodestatus
      state: 'armed_away'
    - condition: template
      value_template: >
        {%- if states.automation.notify_camera_pictures.attributes.last_triggered -%}
          {{ (as_timestamp(now()) - as_timestamp(states.automation.notify_camera_pictures.attributes.last_triggered)) > 300 }}
        {%- else -%}
          true
        {%- endif -%}
    - condition: template
      value_template: >
        {%- if trigger.entity_id == "binary_sensor.backyard_field_detection" or trigger.entity_id == "binary_sensor.backyard_line_crossing" -%}
        {{((as_timestamp(now()) - as_timestamp(states.binary_sensor.backyard_motion.attributes.last_tripped_time)))|round|abs < 30}}
        {%- elif trigger.entity_id == "binary_sensor.driveway_field_detection" or trigger.entity_id == "binary_sensor.driveway_line_crossing" -%}
        {{((as_timestamp(now()) - as_timestamp(states.binary_sensor.driveway_motion.attributes.last_tripped_time)))|round|abs < 30}}
        {%- elif trigger.entity_id == "binary_sensor.patio_field_detection" or trigger.entity_id == "binary_sensor.patio_line_crossing" -%}
        {{((as_timestamp(now()) - as_timestamp(states.binary_sensor.patio_motion.attributes.last_tripped_time)))|round|abs < 30}}
        {%- elif trigger.entity_id == "binary_sensor.porch_field_detection" or trigger.entity_id == "binary_sensor.porch_line_crossing" -%}
        {{((as_timestamp(now()) - as_timestamp(states.binary_sensor.porch_motion.attributes.last_tripped_time)))|round|abs < 30}}
        {%- else -%}
          true
        {%- endif -%}
  trigger:
   - platform: state
     entity_id:
       - binary_sensor.backyard_field_detection
       - binary_sensor.driveway_field_detection
       - binary_sensor.patio_field_detection
       - binary_sensor.porch_field_detection
       - binary_sensor.backyard_line_crossing
       - binary_sensor.driveway_line_crossing
       - binary_sensor.patio_line_crossing
       - binary_sensor.porch_line_crossing
     from: 'off'
     to: 'on'
  action:
    - service: notify.ios
      data_template:
        message: "Check {{ trigger.entity_id.split('.')[1].split('_')[0] }} camera."
        data:
          push:
            category: camera
          entity_id: "camera.{{ trigger.entity_id.split('.')[1].split('_')[0] }}"
          attachment:
            url: "{{ states.camera[trigger.entity_id.split('.')[1].split('_')[0]].attributes.entity_picture }}"
            content-type: jpg
    # - service: shell_command.image_classify
    #   data_template:
    #     camera: "{{ trigger.entity_id.split('.')[1].split('_')[0] }}"
    # - service: shell_command.facebox
    #   data_template:
    #     camera: "{{ trigger.entity_id.split('.')[1].split('_')[0] }}"
    # - service: camera.snapshot
    #   data_template:
    #     entity_id: "camera.{{ trigger.entity_id.split('.')[1].split('_')[0] }}"
    #     filename: '/home/homeassistant/.homeassistant/downloads/camera/{{ trigger.entity_id.split(".")[1].split("_")[0] }}_{{ now().strftime("%d%h%Y_%H%M%S") }}.jpg'
    - service: logbook.log
      data_template:
        name: "Camera activity: "
        message: >-
          {%- for state in states if state.entity_id == trigger.entity_id -%}
            {{ state.attributes.friendly_name }} activated at {{ as_timestamp(now()) | timestamp_custom('%I:%M:%S %p', true) }}.
          {%- endfor -%}
    - service: logbook.log
      data_template:
        name: "Motion detected: "
        message: >-
          {%- if trigger.entity_id == "binary_sensor.backyard_field_detection" or trigger.entity_id == "binary_sensor.backyard_line_crossing" -%}
            {{(as_timestamp(now()) - as_timestamp(states.binary_sensor.backyard_motion.attributes.last_tripped_time))|round(2)}} seconds ago.
          {%- elif trigger.entity_id == "binary_sensor.driveway_field_detection" or trigger.entity_id == "binary_sensor.driveway_line_crossing" -%}
            {{(as_timestamp(now()) - as_timestamp(states.binary_sensor.driveway_motion.attributes.last_tripped_time))|round(2)}} seconds ago.
          {%- elif trigger.entity_id == "binary_sensor.patio_field_detection" or trigger.entity_id == "binary_sensor.patio_line_crossing" -%}
            {{(as_timestamp(now()) - as_timestamp(states.binary_sensor.patio_motion.attributes.last_tripped_time))|round(2)}} seconds ago.
          {%- elif trigger.entity_id == "binary_sensor.porch_field_detection" or trigger.entity_id == "binary_sensor.porch_line_crossing" -%}
            {{(as_timestamp(now()) - as_timestamp(states.binary_sensor.porch_motion.attributes.last_tripped_time))|round(2)}} seconds ago.
          {%- endif -%}

- id: notify_tensorflow_detection
  alias: 'Notify Tensorflow detection'
  initial_state: 'on'
  condition:
    - condition: state
      entity_id: input_select.abodestatus
      state: 'armed_away'
    - condition: template
      value_template: '{{ trigger.to_state.state |int > 0 }}'
    - condition: template
      value_template: >
        {%- if states.automation.notify_tensorflow_detection.attributes.last_triggered -%}
          {{ (as_timestamp(now()) - as_timestamp(state_attr('automation.notify_tensorflow_detection','last_triggered'))) > 30 }}
        {%- else -%}
          true
        {%- endif -%}
  trigger:
   - platform: state
     entity_id:
       - image_processing.tensorflow_porch
       - image_processing.tensorflow_patio
       - image_processing.tensorflow_driveway
       - image_processing.tensorflow_backyard
  action:
    - service: notify.ios_alokiosiphone
      data_template:
        message: >
          {{ state_attr(trigger.entity_id,'matches').keys()|list|unique|list|join|title }} detected in {{ trigger.entity_id.split('.')[1].split('_')[1] }} camera.
        data:
          push:
            category: camera
          entity_id: "camera.{{ trigger.entity_id.split('.')[1].split('_')[1] }}"
          attachment:
            url: "{{ states.camera[trigger.entity_id.split('.')[1].split('_')[1]].attributes.entity_picture }}"
            content-type: jpg

- id: save_camera_images
  alias: 'Camera - Save images on motion'
  initial_state: 'off'
  trigger:
   - platform: state
     entity_id:
       - binary_sensor.backyard_motion
       - binary_sensor.backyard_field_detection
       - binary_sensor.backyard_line_crossing
       - binary_sensor.driveway_motion
       - binary_sensor.driveway_field_detection
       - binary_sensor.driveway_line_crossing
       - binary_sensor.patio_motion
       - binary_sensor.patio_field_detection
       - binary_sensor.patio_line_crossing
       - binary_sensor.porch_field_detection
       - binary_sensor.porch_line_crossing
       - binary_sensor.porch_motion
     from: 'off'
     to: 'on'
  action:
    - service: camera.snapshot
      data_template:
        entity_id: "camera.{{ trigger.entity_id.split('.')[1].split('_')[0] }}"
        filename: '/home/homeassistant/.homeassistant/downloads/camera/{{ trigger.entity_id.split(".")[1].split("_")[0] }}/{{ trigger.entity_id.split(".")[1].split("_")[0] }}_{{ now().strftime("%d%h%Y_%H%M%S") }}.jpg'

#################################################################
## HASS Related
#################################################################

- id: battery_alert
  alias: 'Battery Alert'
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: sensor.battery_status
  action:
    - service: persistent_notification.create
      data_template:
        title: Low Battery levels
        notification_id: low-battery-alert
        message: >
          Check battery: {{ states('sensor.battery_status') }}
    - service: notify.pushbullet
      data_template:
        title: "Battery status"
        message: >
          Check battery: {{ states('sensor.battery_status') }}

- id: heal_zwave_network
  alias: Heal Z-Wave Network
  initial_state: 'on'
  trigger:
    platform: time
    at: '2:31:00'
  action:
    service: zwave.heal_network

# {{state_attr('zwave.garage_door_tilt_sensor','query_stage')=='CacheLoad'}}
# - id: z-wave_cacheload
#   alias: Repair Z-Wave Network
#   initial_state: 'on'
#   trigger:
#     - platform: state
#       entity_id: zwave.garage_door_tilt_sensor
#       to: 'initializing'
#     - platform: state
#       entity_id: zwave.garage_relay
#       to: 'initializing'
#   action:
#     service: zwave.test_network

- id: update_available_notification
  alias: "Update Available Notification"
  initial_state: 'on'
  trigger:
    platform: template
    value_template: "{{states('sensor.pypi_hass_version') == states('sensor.current_version') }}"
  action:
    - service: notify.pushbullet
      data:
        message: "HomeAssistant {{ states('sensor.pypi_hass_version') }} is now available"
        title: "Update HASS"
    - service: persistent_notification.create
      data:
        title: "Update Available"
        message: >
          Home Assistant {{ states('sensor.pypi_hass_version') }} is available, please update.
        notification_id: "update_available"

- id: change_current_theme
  alias: 'Change Current Theme'
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: input_select.current_theme
  action:
    - service: frontend.set_theme
      data_template:
        name: "{{states('input_select.current_theme')}}"

#################################################################
## Commute Times
#################################################################

- id: update_morning_commute_sensor
  alias: "Commute - Update morning commute sensor"
  initial_state: 'on'
  trigger:
    - platform: time
      minutes: '/2'
      seconds: 00
  condition:
    - condition: time
      after: '08:00:00'
      before: '11:00:00'
    - condition: time
      weekday:
        - mon
        - tue
        - wed
        - thu
        - fri
    - condition: state
      entity_id: device_tracker.meta_alok
      state: 'home'
  action:
    - service: sensor.google_travel_sensor_update
      data:
        entity_id: sensor.morning_commute

- id: update_evening_commute_sensor
  alias: "Commute - Update evening commute sensor"
  initial_state: 'on'
  trigger:
    - platform: time
      minutes: '/2'
      seconds: 00
  condition:
    - condition: time
      after: '17:00:00'
      before: '20:00:00'
    - condition: time
      weekday:
        - mon
        - tue
        - wed
        - thu
        - fri
    - condition: template
      value_template: >
        {%- if states('device_tracker.meta_alok') -%}
          {{ states('device_tracker.meta_alok') != 'home' }}
        {%- else -%}
          false
        {%- endif -%}
  action:
    - service: sensor.google_travel_sensor_update
      data:
        entity_id: sensor.alok_to_home

- id: morning_commute
  alias: "Morning Commute"
  initial_state: 'on'
  condition:
    condition: and
    conditions:
     - condition: time
       after: '08:15:00'
       before: '11:00:00'
     - condition: time
       weekday:
         - mon
         - tue
         - wed
         - thu
         - fri
     - condition: state
       entity_id: device_tracker.meta_alok
       state: 'home'
  trigger:
    platform: numeric_state
    entity_id: sensor.morning_commute
    below: 43
  action:
    - service: notify.pushbullet
      data:
        message: Commute time is 43 minutes
        title: Leave for Work
        target: device/myiPhone
    - service: homeassistant.turn_on
      entity_id: script.notificationleavework

- id: evening_commute
  alias: "Evening Commute"
  initial_state: 'on'
  condition:
    condition: and
    conditions:
     - condition: time
       after: '17:00:00'
       before: '20:00:00'
     - condition: time
       weekday:
         - mon
         - tue
         - wed
         - thu
         - fri
     - condition: template
       value_template: >
         {%- if states('device_tracker.meta_alok') -%}
           {{ states('device_tracker.meta_alok') != 'home' }}
         {%- else -%}
           false
         {%- endif -%}
  trigger:
    platform: template
    value_template: >
      {%- if states.sensor.alok_to_home.attributes.duration_in_traffic -%}
        {{(states.sensor.alok_to_home.attributes.duration_in_traffic.split(' ')[0]|int) / (states.sensor.alok_to_home.attributes.duration.split(' ')[0]|int) < 1.25}}
      {%- else -%}
        false
      {%- endif -%}
  action:
    service: notify.pushbullet
    data_template:
      message: Commute time is {{states.sensor.alok_to_home.attributes.duration_in_traffic.split(' ')[0]|int}} minutes
      title: Leave for Home
      target: device/myiPhone

- id: plexspy_notification
  alias: "Plex Spy notification"
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: sensor.plexspy
  action:
    - service: notify.pushbullet
      data_template:
        message: >
          {%- if states.sensor.plexspy.attributes -%}
            {% set space = joiner(' ') %}
            {%- for attr in states.sensor.plexspy.attributes -%}
             {%- if not attr=="friendly_name" and not attr=="unit_of_measurement" and not attr=="homebridge_hidden"-%}
              {{space()}}{{attr}} is watching {{states.sensor.plexspy.attributes[attr]}}.
             {%- endif -%}
            {%- endfor -%}
          {%- endif -%}
        title: "Plex {{ trigger.to_state.state }} people streaming. "
        target: device/myiPhone
    - service: logbook.log
      data_template:
        name: "Plex {{ trigger.to_state.state }} people streaming. "
        message: >
          {%- if states.sensor.plexspy.attributes -%}
            {% set space = joiner(' ') %}
            {%- for attr in states.sensor.plexspy.attributes -%}
             {%- if not attr=="friendly_name" and not attr=="unit_of_measurement" and not attr=="homebridge_hidden"-%}
              {{space()}}{{attr}} is watching {{states.sensor.plexspy.attributes[attr]}}.
             {%- endif -%}
            {%- endfor -%}
          {%- endif -%}

#################################################################
## Home Automation Related
#################################################################

- id: xiaomi_vibration_sensor_test
  alias: Xiaomi Vibration sensor test
  initial_state: 'on'
  trigger:
    - platform: event
      event_type: xiaomi_aqara.movement
      event_data:
        entity_id: binary_sensor.vibration_158d0002a51fc2
        movement_type: tilt
  action:
    - service: light.toggle
      data:
        entity_id: light.master_lights
    - service: logbook.log
      data_template:
        name: "Xiaomi event: "
        message: >
          {{trigger.event.data}}

- id: micube_test
  alias: MiCube event test
  initial_state: 'on'
  trigger:
    - platform: event
      event_type: xiaomi_aqara.cube_action
      event_data:
        entity_id: binary_sensor.cube_158d0001035aa7
  action:
    - service: logbook.log
      data_template:
        name: "MiCube event: "
        message: >
          {%- if trigger.event.data.action_value -%}
            {{trigger.event.data.action_type}} and {{trigger.event.data.action_value}}
          {%- else -%}
            {{trigger.event.data.action_type}}
          {%- endif -%}

- id: micube_brightness_rotate
  alias: "MiCube rotate - Master lights"
  initial_state: 'on'
  condition:
    - condition: state
      entity_id: light.master_lights
      state: 'on'
  trigger:
    platform: event
    event_type: xiaomi_aqara.cube_action
    event_data:
      entity_id: binary_sensor.cube_158d0001035aa7
      action_type: rotate
  action:
    - service: light.turn_on
      data_template:
        entity_id: light.master_lights
        brightness: >
              {% set state = (state_attr('light.master_lights','brightness') + trigger.event.data.action_value|int) -%}
              {%-  if state > 255 -%}
                 {%- set state  = 255 -%}
              {%-  elif state < 0 -%}
                 {%- set state  = 0 -%}
              {%- endif %}
              {{ state }}

- id: micube_scenes_reset
  alias: "MiCube scene reset"
  initial_state: on
  condition:
    - condition: state
      entity_id: light.master_lights
      state: 'on'
  trigger:
    platform: event
    event_type: xiaomi_aqara.cube_action
    event_data:
      entity_id: binary_sensor.cube_158d0001035aa7
      action_type: flip180
  action:
    service: script.set_hue_scene
    data_template:
      group: "Master"
      scene: "Bright"

- id: micube_master_scenes
  alias: "MiCube Master scene"
  initial_state: on
  condition:
    - condition: state
      entity_id: light.master_lights
      state: 'on'
  trigger:
    - platform: event
      event_type: xiaomi_aqara.cube_action
      event_data:
        entity_id: binary_sensor.cube_158d0001035aa7
        action_type: flip90
  action:
    - service: script.set_hue_scene
      data_template:
        group: "Master"
        scene: >
          {{ ['Arctic aurora', 'Galaxy', 'Starlight', 'Nightlight', 'Savanna sunset', 'Spring blossom', 'Tropical twilight'] | random  }}
    - service: automation.turn_off
      entity_id: automation.turn_off_master_lights

- id: micube_toggle_master
  alias: "MiCube Toggle Master"
  initial_state: on
  trigger:
    platform: event
    event_type: xiaomi_aqara.cube_action
    event_data:
      entity_id: binary_sensor.cube_158d0001035aa7
      action_type: tap_twice
  action:
    - service: light.toggle
      data:
        entity_id: light.master_lights

- id: turn_off_master_lights_at_night
  alias: "Turn off Master lights if they randomly turn on at night"
  initial_state: on
  trigger:
    - platform: state
      entity_id:
        - light.hue_color_lamp_1
        - light.hue_color_lamp_2
        - light.hue_color_lamp_1
      to: 'on'
  condition:
    - condition: state
      entity_id: input_select.abodestatus
      state: 'armed_home'
  action:
    - service: light.turn_off
      data_template:
        entity_id: '{{trigger.entity_id}}'

- id: prevent_overcharging
  alias: 'Prevent overcharging'
  initial_state: 'on'
  trigger:
    - platform: numeric_state
      entity_id: sensor.wemopowerused
      below: 2
      for: '00:05:00'
  condition:
    - condition: state
      entity_id: switch.wemoinsight
      state: 'on'
  action:
     service: switch.turn_off
     data:
       entity_id: switch.wemoinsight

- id: ensure_switches_on
  alias: 'Ensure smart-switches are on'
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id:
        - group.living_room_lights
        - light.lifx5
        - group.master_lights
      to: 'unavailable'
      for: '00:05:00'
  action:
    - service: notify.pushbullet
      data_template:
        title: "Check {{ trigger.to_state.name }} switch"
        message: >
          Check switch: {{ trigger.to_state.name }}
    - service: notify.ios
      data_template:
        message: "Check {{ trigger.to_state.name }} switch"
        data:
          subtitle: "Looks like {{ trigger.to_state.name }} switch is turned off"
          push:
            badge: 0

- id: master_lights_on
  alias: 'Turn on Master lights on motion'
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_sensor_158d00016c53bf
      from: 'off'
      to: 'on'
  condition:
    condition: or
    conditions:
      - condition: and
        conditions:
          - condition: time
            after: '17:00:00'
            before: '22:30:00'
          - condition: state
            entity_id: light.master_lights
            state: 'off'
      - condition: and
        conditions:
          - condition: time
            after: '22:30:00'
          - condition: time
            before: '07:00:00'
          - condition: state
            entity_id: light.master_lights
            state: 'off'
          - condition: state
            entity_id: input_select.abodestatus
            state: 'disarmed'
      - condition: and
        conditions:
          - condition: time
            after: '22:30:00'
          - condition: time
            before: '07:00:00'
          - condition: state
            entity_id: light.master_lights
            state: 'off'
          - condition: template
            value_template: >
              {%- if states.automation.disarm_abode_from_away.attributes.last_triggered -%}
                {{ (as_timestamp(now()) - as_timestamp(states.automation.disarm_abode_from_away.attributes.last_triggered)) < 500 }}
              {%- else -%}
                false
              {%- endif -%}
    # - condition: time
    #   after: '17:00:00'
    #   before: '22:30:00'
    # - condition: state
    #   entity_id: light.master_lights
    #   state: 'off'
    # - condition: template
    #   value_template: >
    #     {%- if states.light.master_lights.last_changed -%}
    #       {{ (as_timestamp(now()) - as_timestamp(states.light.master_lights.last_changed)) > 300 }}
    #     {%- else -%}
    #       true
    #     {%- endif -%}
  action:
    - service: light.turn_on
      data:
        entity_id: light.master_lights
        brightness: 255
    - delay: '00:00:05'
    - service: script.set_hue_scene
      data_template:
        group: "Master"
        scene: "Default"

- id: master_lights_off
  alias: 'Turn off Master lights'
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: binary_sensor.motion_sensor_158d00016c53bf
      to: 'off'
      for: '00:05:00'
  condition:
    - condition: time
      after: '17:00:00'
      before: '22:00:00'
    - condition: state
      entity_id: light.master_lights
      state: 'on'
  action:
    - service: light.turn_off
      data:
        entity_id: light.master_lights

- id: garage_lights_on
  alias: 'Turn on garage lights when door opened'
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: binary_sensor.door_window_sensor_158d0001bf26df
      from: 'off'
      to: 'on'
  condition:
    - condition: or
      conditions:
       - condition: state
         entity_id: cover.garagedoor
         state: 'closed'
       - condition: state
         entity_id: sun.sun
         state: 'below_horizon'
  action:
     service: light.turn_on
     data:
       entity_id: light.lifx5
       brightness: 255

- id: garage_lights_off
  alias: 'Turn off garage lights'
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: binary_sensor.door_window_sensor_158d0001bf26df
      to: 'off'
      for: '00:00:30'
    - platform: state
      entity_id: light.lifx5
      to: 'on'
      for: '00:05:00'
  condition:
    - condition: state
      entity_id: light.lifx5
      state: 'on'
  action:
     service: light.turn_off
     entity_id: light.lifx5

- id: kitchen_light_brightness
  alias: 'Kitchen light brightness'
  initial_state: 'on'
  trigger:
   - platform: state
     entity_id: light.kitchen_lights
     from: 'off'
     to: 'on'
  condition:
    - condition: template
      value_template: '{{ trigger.from_state.state == "off" }}'
  action:
     service: light.turn_on
     data:
       entity_id: light.kitchen_lights
       brightness: 200

- id: turn_off_xiaomi
  alias: 'Turn off Xiaomi Gateway light'
  initial_state: 'on'
  trigger:
   - platform: numeric_state
     entity_id: sensor.illumination_34ce00813670
     above: 600
  condition:
    - condition: state
      entity_id: light.gateway_light_34ce00813670
      state: 'on'
  action:
    - service: light.turn_off
      entity_id: light.gateway_light_34ce00813670

- id: change_xiaomi_color
  alias: 'Change Xiaomi color'
  initial_state: 'on'
  condition:
    - condition: time
      after: '19:15:00'
      before: '07:45:00'
    - condition: state
      entity_id: binary_sensor.living_room_occupancy
      state: 'on'
  trigger:
   - platform: time
     minutes: '/15'
     seconds: 00
  action:
     service: light.turn_on
     entity_id: light.gateway_light_34ce00813670
     data_template:
       brightness: 255
       rgb_color: ['{{ (range(0, 255)|random) }}','{{ (range(0, 255)|random) }}','{{ (range(0, 255)|random) }}']

- id: change_leeo_color
  alias: 'Change Leeo color'
  initial_state: 'on'
  condition:
    - condition: state
      entity_id: device_tracker.leeoalert
      state: 'home'
    - condition: time
      after: '19:15:00'
      before: '07:45:00'
    - condition: state
      entity_id: binary_sensor.living_room_occupancy
      state: 'on'
  trigger:
   - platform: time
     minutes: '/15'
     seconds: 00
  action:
     service: ifttt.trigger
     data_template: {"event":"leeocolor", "value1":"{{ '{:02x}{:02x}{:02x}'.format(range(0, 255) | random, range(0, 255) | random, range(0, 255) | random) }}"}

- id: change_leeoup_color
  alias: 'Change Leeo upstairs color'
  initial_state: 'on'
  condition:
    - condition: time
      after: '19:15:00'
      before: '07:45:00'
  trigger:
   - platform: time
     minutes: '/15'
     seconds: 00
  action:
     service: ifttt.trigger
     data_template: {"event":"leeocolorup", "value1":"{{ '{:02x}{:02x}{:02x}'.format(range(0, 255) | random, range(0, 255) | random, range(0, 255) | random) }}"}

- id: frontyard_lights
  alias: 'Frontyard lights on Motion'
  initial_state: 'on'
  condition:
    - condition: state
      entity_id: sun.sun
      state: 'below_horizon'
    - condition: time
      after: '19:00:00'
      before: '05:00:00'
  trigger:
   - platform: state
     entity_id:
       - binary_sensor.ring_front_door_motion
     from: 'off'
     to: 'on'
  action:
    - service: switch.turn_on
      entity_id:
        - switch.driveway
        - switch.wemoporch
    - delay: '00:05:00'
    - service: switch.turn_off
      entity_id:
        - switch.driveway
        - switch.wemoporch

- id: lifx_party_mode
  alias: "Turn Lifx Party Mode On"
  initial_state: 'off'
  trigger:
    - platform: time
      seconds: '/3'
  condition:
    - condition: state
      entity_id: input_boolean.partymode
      state: 'on'
  action:
    - service: light.turn_on
      entity_id: light.lifxnrkitchen
      data_template:
        rgb_color: ['{{ (range(0, 255)|random) }}', '{{ (range(0, 255)|random) }}', '{{ (range(0, 255)|random) }}']
        brightness: 200
        transition: '{{ (range(1, 2)|random) }}'
    - service: light.turn_on
      entity_id: light.lifxnrguest
      data_template:
        rgb_color: ['{{ (range(0, 255)|random) }}', '{{ (range(0, 255)|random) }}', '{{ (range(0, 255)|random) }}']
        brightness: 200
        transition: '{{ (range(1, 2)|random) }}'
    - service: light.turn_on
      entity_id: light.lifx3
      data_template:
        rgb_color: ['{{ (range(0, 255)|random) }}', '{{ (range(0, 255)|random) }}', '{{ (range(0, 255)|random) }}']
        brightness: 200
        transition: '{{ (range(1, 2)|random) }}'
- id: lifx_party_mode_off
  alias: "Turn Lifx Party Mode Off"
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: input_boolean.partymode
      to: 'off'
  action:
    - service: light.turn_on
      entity_id: group.living_room_lights
      data:
        rgb_color: [255, 255, 255]
        brightness: 250

- id: outdoor_light_at_night
  alias: Outdoor lights at night
  initial_state: 'on'
  trigger:
    platform: sun
    event: sunset
    offset: "00:45:00"
  action:
    - service: switch.turn_on
      entity_id:
        - switch.driveway
    - delay: '00:45:00'
    - service: switch.turn_off
      entity_id:
        - switch.driveway

- id: driveway_light_off_during_the_day
  alias: Driveway light Off during the day
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: switch.driveway
    to: 'on'
  condition:
    - condition: state
      entity_id: sun.sun
      state: 'above_horizon'
  action:
    - service: switch.turn_off
      entity_id:
        - switch.driveway
        - switch.wemoporch

- id: set_hvac_mode
  alias: 'Set HVAC Mode'
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: sensor.hvacmode
      to: 'heat'
    - platform: state
      entity_id: sensor.hvacmode
      to: 'cool'
  action:
    - service: input_select.select_option
      data_template:
        entity_id: input_select.hvacmode
        option: '{{ trigger.to_state.state }}'
    - service: logbook.log
      data_template:
        name: "HVAC Mode changed to: "
        message: '{{ trigger.to_state.state }}'
- id: reset_garage_relay
  alias: 'Reset Garage Relay'
  initial_state: 'on'
  trigger:
    - platform: time
      seconds: '/5'
  condition:
    - condition: state
      entity_id: switch.garage_relay_switch
      state: "on"
  action:
    - service: switch.turn_off
      entity_id: switch.garage_relay_switch

- id: open_garage_door_when_someone_home
  alias: 'Open Garage door when someone home'
  initial_state: 'on'
  condition:
    - condition: state
      entity_id: binary_sensor.garagedoor
      state: 'off'
      for: '00:02:00'
    - condition: state
      entity_id: input_boolean.abodeupdate
      state: 'on'
    - condition: template
      value_template: >
        {%- if states.automation.open_garage_door_when_someone_home.attributes.last_triggered -%}
          {{ (as_timestamp(now()) - as_timestamp(states.automation.open_garage_door_when_someone_home.attributes.last_triggered)) > 150 }}
        {%- else -%}
          true
        {%- endif -%}
    - condition: template
      value_template: >
        {%- if states.automation.update_ha_after_startup.attributes.last_triggered -%}
          {{ (as_timestamp(now()) - as_timestamp(states.automation.update_ha_after_startup.attributes.last_triggered)) > 120 }}
        {%- else -%}
          true
        {%- endif -%}
    - condition: template
      value_template: >
        {%- if states.automation.arm_abode.attributes.last_triggered -%}
          {{ (as_timestamp(now()) - as_timestamp(states.automation.arm_abode.attributes.last_triggered)) > 240 }}
        {%- else -%}
          true
        {%- endif -%}
  trigger:
    - platform: state
      entity_id:
        - device_tracker.meta_rashmi
        - device_tracker.meta_alok
      from: 'not_home'
      to: 'home'
  action:
    - service: switch.turn_on
      entity_id: switch.garage_relay_switch
    - service: logbook.log
      data_template:
        name: "Garage door opened for: "
        message: "{{trigger.to_state.name.split(' ')[0]}}"
- id: close_garage_door_when_abode_is_home_or_away
  alias: 'Close garage door when Abode is Home or Away'
  initial_state: 'on'
  condition:
    - condition: state
      entity_id: binary_sensor.garagedoor
      state: 'on'
    - condition: template
      value_template: >
        {%- if states.automation.close_garage_door_when_abode_is_home_or_away.attributes.last_triggered  -%}
          {{(as_timestamp(now()) - as_timestamp(states.automation.close_garage_door_when_abode_is_home_or_away.attributes.last_triggered)) > 60}}
        {%- else -%}
          true
        {%- endif -%}
    - condition: or
      conditions:
       - condition: state
         entity_id: input_select.abodestatus
         state: 'armed_home'
       - condition: state
         entity_id: input_select.abodestatus
         state: 'armed_away'
  trigger:
    - platform: time
      minutes: '/5'
  action:
    - service: switch.turn_on
      entity_id: switch.garage_relay_switch

- id: sensors_changed_when_nobody_home
  alias: 'Sensors changed when nobody is home'
  initial_state: 'on'
  condition:
    condition: state
    entity_id: input_select.abodestatus
    state: 'armed_away'
    for:
      minutes: 10
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.garagedoor
        - binary_sensor.back_door
        - binary_sensor.garage_entry_door
        - binary_sensor.front_door
        - binary_sensor.motion_sensor_158d00016daecc
        - binary_sensor.motion_sensor_158d00016612af
        - binary_sensor.motion_sensor_158d0001a1f2ab
      from: 'off'
      to: 'on'
  action:
    - service: light.turn_on
      data:
        entity_id: group.all_lights
    - service: notify.pushbullet
      data_template:
        title: "Alarm!"
        message: "The {{ trigger.to_state.name }} was changed to {{ trigger.to_state.state }} while no one is home - {{ as_timestamp(now()) | timestamp_custom('%I:%M:%S %p %d-%b-%Y', true) }}"
    - service: homeassistant.turn_on
      entity_id: script.notificationalarm

- id: sound_abode_alarm_notification
  alias: 'Sound alarm using notifications'
  initial_state: 'on'
  trigger:
    - platform: event
      event_type: ios.notification_action_fired
      event_data:
        actionName: SOUND_ALARM
  action:
    - service: light.turn_on
      data:
        entity_id: group.all_lights
    - service: homeassistant.turn_on
      entity_id: script.notificationalarm

- id: turn_on_abode_updates
  alias: 'Turn on Abode updates'
  initial_state: 'on'
  trigger:
    - platform: event
      event_type: ios.notification_action_fired
      event_data:
        actionName: ENABLE_ABODE_UPDATES
  action:
    - service: homeassistant.turn_on
      entity_id: input_boolean.abodeupdate

- id: turn_on_lights_randomly
  alias: Turn lights on randomly
  initial_state: 'on'
  condition:
    condition: state
    entity_id: input_select.abodestatus
    state: 'armed_away'
  trigger:
    platform: sun
    event: sunset
    offset: "00:45:00"
  action:
    - service: light.turn_on
      data:
        entity_id: group.living_room_lights

- id: turn_off_lights_in_2_hours
  alias: Turn off lights 2 hours
  initial_state: 'on'
  condition:
    - condition: state
      entity_id: input_select.abodestatus
      state: 'armed_away'
    - condition: state
      entity_id: group.living_room_lights
      state: 'on'
  trigger:
    platform: sun
    event: sunset
    offset: "02:45:00"
  action:
    - service: light.turn_off
      data:
        entity_id: group.living_room_lights

## Humidifier
- id: turn_on_humidifier
  alias: Turn on humidifier
  initial_state: 'off'
  condition:
     - condition: time
       after: '08:15:00'
       before: '21:45:00'
     - condition: template
       value_template: '{{ states("sensor.humidity_158d0001ab3b2b") | int < 30 }}'
     - condition: state
       entity_id: switch.wemoswitch
       state: 'off'
  trigger:
   - platform: time
     minutes: '/10'
     seconds: 00
  action:
    service: homeassistant.turn_on
    entity_id: switch.wemoswitch

- id: turn_off_humidifier
  alias: Turn off humidifier
  initial_state: 'off'
  condition:
    - condition: state
      entity_id: switch.wemoswitch
      state: 'on'
  trigger:
    platform: template
    value_template: '{{ states("sensor.humidity_158d0001ab3b2b") | int >= 30 }}'
  action:
    service: homeassistant.turn_off
    entity_id: switch.wemoswitch

# - id: get_iphone_steps
#   alias: Get steps from iPhone
#   initial_state: 'on'
#   trigger:
#     - platform: time
#       minutes: 30
#       seconds: 00
#   action:
#     - service: mqtt.publish
#       data:
#         topic: "owntracks/pi/alokphone/cmd"
#         payload_template: '{"_type" : "cmd", "action": "reportSteps"}'
#         qos: 2
#     - service: mqtt.publish
#       data:
#         topic: "owntracks/pi/rashmiphone/cmd"
#         payload_template: '{"_type" : "cmd", "action": "reportSteps"}'
#         qos: 2

- id: uscis_update_notification
  alias: "USCIS - Notify on update"
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id:
        - sensor.alok_485
        - sensor.rashmi_485
        - sensor.arnav_485
  action:
    - service: notify.pushbullet
      data_template:
        title: "{{ trigger.to_state.name }} status updated"
        message: >
          {{ states.sensor[trigger.entity_id.split('.')[1]].attributes.current_status }}

- id: update_sensors
  alias: Update Sensors
  initial_state: on
  trigger:
    platform: time
    hours: '/3'
    minutes: 01
    seconds: 00
  action:
      service: homeassistant.update_entity
      data:
        entity_id:
          - sensor.forecast_0
          - sensor.forecast_1
          - sensor.forecast_2
          - sensor.forecast_3
          - sensor.forecast_4
          - sensor.forecast_5
          - sensor.forecast_6
          - sensor.forecast_7
          - sensor.battery_status
          - sensor.emulated_hue_names
#################################################################
## Harmony Remote
#################################################################
- id: set_initial_values_on_harmony_start
  alias: "Set initial values on Harmony Start"
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: remote.livingroom
    to: 'on'
  action:
    - service: homeassistant.turn_on
      entity_id: input_boolean.tv
    - service: input_select.select_option
      data_template:
        entity_id: input_select.livingroomharmony
        option: >
          {{ state_attr('remote.livingroom','current_activity') }}
    - service: input_number.set_value
      data_template:
        entity_id: input_number.harmonyvolume
        value: >
            {{ (state_attr('media_player.family_room_2', 'volume_level') * 100) | int }}
    - service: input_select.select_option
      data_template:
        entity_id: input_select.hdmiswitcher
        option: >
          {%- if state_attr('remote.livingroom','current_activity') == "Watch Apple TV" -%}
            AppleTV
          {%- elif state_attr('remote.livingroom','current_activity') == "Watch Fire TV" -%}
            FireTV
          {%- elif state_attr('remote.livingroom','current_activity') == "SATV" -%}
            Shield
          {%- endif -%}

- id: update_tv_status_in_ha
  alias: Update TV status in HA
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: media_player.living_room_tv
  action:
    - service_template: "homeassistant.turn_{{ 'on' if trigger.to_state.state == 'on' else 'off' }}"
      data:
        entity_id: input_boolean.tv
- id: turn_on_off_shield_with_tv
  alias: Turn Shield on/off with TV
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: media_player.living_room_tv
  action:
    - service: remote.send_command
      data_template:
        command: "{{ 'PowerOff' if trigger.to_state.state == 'off' else 'PowerOn' }}"
        device: 31747959
        entity_id: remote.livingroom
- id: no_tv_time
  alias: No TV time
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: media_player.living_room_tv
    from: 'off'
    to: 'on'
  condition:
    - condition: state
      entity_id: input_boolean.tvtime
      state: 'off'
  action:
    - service: remote.send_command
      data_template:
        command: PowerOff
        device: 56988979
        entity_id: remote.livingroom
    - service: media_player.turn_off
      entity_id:
        - media_player.living_room_tv

- id: turn_tv_on_off
  alias: Turn TV on/off
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: input_boolean.tv
  action:
    - service: remote.send_command
      data_template:
        command: Home
        device: 31747959
        entity_id: remote.livingroom
    - service: remote.send_command
      data_template:
        command: "{{ 'PowerOff' if trigger.to_state.state == 'off' else 'PowerOn' }}"
        device: 56988979
        entity_id: remote.livingroom
- id: set_volume
  alias: "Set Volume"
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: input_number.harmonyvolume
  action:
    - service: media_player.volume_set
      data_template:
        entity_id: media_player.family_room_2
        volume_level: >
          {{states('input_number.harmonyvolume') | int / 100}}

- id: start_harmony_activity_from_input_select
  alias: "Start Harmony activity from input_select"
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: input_select.livingroomharmony
  action:
  - service: remote.turn_on
    data_template:
      entity_id: remote.livingroom
      activity: "{{trigger.to_state.state}}"

- id: update_ha_if_harmony_activity_changes
  alias: "Update HA if Harmony activity changes"
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: sensor.living_room
  action:
    - service: input_select.select_option
      data_template:
        entity_id: input_select.livingroomharmony
        option: "{{trigger.to_state.state}}"
    - service: input_select.select_option
      data_template:
        entity_id: input_select.hdmiswitcher
        option: >
          {%- if trigger.to_state.state == "Watch Apple TV" -%}
            AppleTV
          {%- elif trigger.to_state.state == "Watch Fire TV" -%}
            FireTV
          {%- else -%}
            Shield
          {%- endif -%}

- id: update_ha_after_startup
  alias: Update HA after startup
  initial_state: 'on'
  trigger:
    platform: homeassistant
    event: start
  action:
    - delay: '00:00:01'
    - service: homeassistant.turn_on
      entity_id: script.initialize_hass

- id: change_hdmi_switcher
  alias: "Change HDMI Switcher"
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: input_select.hdmiswitcher
  action:
  - service: remote.send_command
    data_template:
      command: >-
        {%- if trigger.to_state.state == "AppleTV" -%}
          Input1
        {%- elif trigger.to_state.state == "FireTV" -%}
          Input2
        {%- elif trigger.to_state.state == "Shield" -%}
          Input3
        {%- endif -%}
      device: 31766668
      entity_id: remote.livingroom
- id: change_hdmi_input
  alias: "Change HDMI Input"
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: input_select.hdmiinput
  action:
  - service: remote.send_command
    data_template:
      command: >-
        {%- if trigger.to_state.state == "InputHdmi1" -%}
          InputHdmi1
        {%- elif trigger.to_state.state == "InputHdmi2" -%}
          InputHdmi2
        {%- elif trigger.to_state.state == "InputHDMI3" -%}
          InputHDMI3
        {%- elif trigger.to_state.state == "InputHdmi4" -%}
          InputHdmi4
        {%- endif -%}
      device: 56988979
      entity_id: remote.livingroom
- id: update_volume_slider
  alias: "Update Volume Slider"
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: sensor.sonos_volume
  action:
    - service: input_number.set_value
      data_template:
        entity_id: input_number.harmonyvolume
        value: '{{ trigger.to_state.state }}'
    - service: notify.shield
      data_template:
        title: "Home Assistant"
        message: >
            Volume changed to {{ trigger.to_state.state }}
- id: notify_sonos_audio_in
  alias: "Notify Sonos audio-in state"
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: sensor.sonos_stereo
      to: '2'
  condition:
    - condition: template
      value_template: "{{state_attr('media_player.family_room_2','source')=='TV'}}"
    - condition: state
      entity_id: media_player.family_room_2
      state: 'playing'
  action:
    service: notify.telegram
    data_template:
      message: Sonos audio-in is {{states('sensor.sonos_audio_in')}}
      title: Sonos in Stereo
- id: sonos_enable_speech_enhance_and_night_sound
  alias: "Sonos Enable speech enhance and night sound"
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: binary_sensor.television
      from: 'off'
      to: 'on'
  condition:
    - condition: time
      after: '20:30:00'
      before: '23:00:00'
  action:
    - service: media_player.sonos_set_option
      data:
        entity_id: media_player.family_room_2
        night_sound: true
    - service: media_player.sonos_set_option
      data:
        entity_id: media_player.family_room_2
        speech_enhance: true
- id: sonos_disable_speech_enhance_and_night_sound
  alias: "Sonos Disable speech enhance and night sound"
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: binary_sensor.television
      to: 'off'
  condition:
    - condition: time
      after: '20:30:00'
      before: '07:00:00'
  action:
    - service: media_player.sonos_set_option
      data:
        entity_id: media_player.family_room_2
        night_sound: false
    - service: media_player.sonos_set_option
      data:
        entity_id: media_player.family_room_2
        speech_enhance: false


- id: ifttt_test
  alias: IFTTT Test
  initial_state: 'on'
  trigger:
    platform: event
    event_type: ifttt_webhook_received
  action:
    - service: logbook.log
      data_template:
        name: "IFTTT event: "
        message: >
          {{trigger.event.data}}

- id: webhook_geofency_test
  alias: Webhook Geofency Test
  initial_state: 'on'
  trigger:
    - platform: webhook
      webhook_id: alok_buckhead
  action:
    # - service: device_tracker.see
    #   data_template:
    #     dev_id: b4445761f6c04b7f835fcfdc03b47111
    #     gps:
    #       - "{{trigger.json.latitude}}"
    #       - "{{trigger.json.longitude}}"
    - service: logbook.log
      data_template:
        name: "Geofency event: "
        message: >
          {{trigger.json.latitude}}
